---
layout: baseWithMenuFullWidth
title: Demo
tags: page
order: 5
---

{% include "demo/upload.njk" %}

<div class="h-10"></div>

{% include "demo/rest-api.njk" %}

<div class="h-10"></div>

{% include "demo/tips.njk" %}
<script defer src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js"></script>
<script defer src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-tflite@0.0.1-alpha.10/dist/tf-tflite.min.js"></script>

<script>
let model;
let predictElementText = document.getElementById("predicted-result")
predictElementText.innerHTML = "Setting up AI model ⏳";

// Load the model when the page loads
async function loadModel() {
    model = await tflite.loadTFLiteModel('/assets/model/classification_model.tflite');
    predictElementText.innerHTML = ""
}

// Run loadModel after tfjs-backend-cpu.js is loaded
const scriptUrls = [
  'https://cdn.jsdelivr.net/npm/@tensorflow/tfjs/dist/tf.min.js',
  'https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-tflite@0.0.1-alpha.6/dist/tf-tflite.min.js'
];
Promise.all(scriptUrls.map((url) => {
  const script = document.createElement('script');
  script.src = url;
  return new Promise((resolve) => {
    script.addEventListener('load', resolve);
    document.head.appendChild(script); // Assuming you want to append to the head
  });
}))
.then(() => {
  console.log('All scripts loaded!');
  loadModel();
})
.catch((error) => {
  console.error('Error loading scripts:', error);
});

const dropArea = document.getElementById("drop-area");
const inputFile = document.getElementById("input-file");
const imageView = document.getElementById("img-view");

inputFile.addEventListener('change', uploadImage);


// Function to preprocess image file and convert it to a tensor
async function processImageFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = async function() {
            const img = new Image();
            img.onload = function() {
                const inputTensor = tf.browser.fromPixels(img)
                    .resizeBilinear([224, 224])
                    .expandDims()
                    .toFloat()
                    .div(tf.scalar(255)); // Normalize pixel values to [0, 1]

                resolve(inputTensor);
            
            };
            img.src = reader.result;
        };
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

async function  uploadImage (){
    let imgLink = URL.createObjectURL(inputFile.files[0])
    imageView.style.backgroundImage = `url(${imgLink})`;
    imageView.textContent = "";
    imageView.style.border = 0;

     if (!model) {
        predictElementText.innerHTML = "Model not loaded.";
        return;
    }

    // Example labels array
    const labels = ['cardboard', 'glass', 'metal', 'paper', 'plastic', 'trash'];

    predictElementText.innerHTML = "Analysing ⏳"
    // Preprocess input image
    const tensor = await processImageFile(inputFile.files[0]);
    // Use the tensor for further processing or inference
    // Perform inference
    const predictions = model.predict(tensor);

    // Get predictions 
    const predictionOutput = predictions.dataSync();

    // Get the predicted label index
    const predictedLabelIndex = predictionOutput.indexOf(Math.max(...predictionOutput));

    // Get the predicted percentage for each class
    const probabilities = predictions.dataSync();

    // Map the predicted label index to the actual label
    const predictedLabel = labels[predictedLabelIndex];

    // Get the predicted percentage for the predicted class
    const predictedPercentage = (probabilities[predictedLabelIndex] * 100).toFixed(2);

    predictElementText.innerHTML = `Result: Predicted <b>${predictedLabel}</b> with <b>${predictedPercentage}</b>% confidence.`;
    
    tensor.dispose(); // Free up memory

}

dropArea.addEventListener("dragover", function(e){
    e.preventDefault();
})

dropArea.addEventListener("drop", function(e){
    e.preventDefault();
    inputFile.files = e.dataTransfer.files;
    uploadImage();
})

</script>
